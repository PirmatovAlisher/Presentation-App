// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PresentationApp.Data;

#nullable disable

namespace PresentationApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("PresentationApp.Models.DrawingPath", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LineWidth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SlideId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SlideId");

                    b.ToTable("DrawingPaths");
                });

            modelBuilder.Entity("PresentationApp.Models.Point", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DrawingPathId")
                        .HasColumnType("TEXT");

                    b.Property<double>("X")
                        .HasColumnType("REAL");

                    b.Property<double>("Y")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("DrawingPathId");

                    b.ToTable("Point");
                });

            modelBuilder.Entity("PresentationApp.Models.Presentation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatorName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Presentations");
                });

            modelBuilder.Entity("PresentationApp.Models.PresentationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEditor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PresentationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PresentationUsers");
                });

            modelBuilder.Entity("PresentationApp.Models.Slide", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PresentationId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PresentationId");

                    b.ToTable("Slides");
                });

            modelBuilder.Entity("PresentationApp.Models.TextBlock", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<double>("Left")
                        .HasColumnType("REAL");

                    b.Property<string>("SlideId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Top")
                        .HasColumnType("REAL");

                    b.Property<double>("Width")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("SlideId");

                    b.ToTable("TextBlocks");
                });

            modelBuilder.Entity("PresentationApp.Models.DrawingPath", b =>
                {
                    b.HasOne("PresentationApp.Models.Slide", null)
                        .WithMany("Drawings")
                        .HasForeignKey("SlideId");
                });

            modelBuilder.Entity("PresentationApp.Models.Point", b =>
                {
                    b.HasOne("PresentationApp.Models.DrawingPath", null)
                        .WithMany("Points")
                        .HasForeignKey("DrawingPathId");
                });

            modelBuilder.Entity("PresentationApp.Models.Slide", b =>
                {
                    b.HasOne("PresentationApp.Models.Presentation", null)
                        .WithMany("Slides")
                        .HasForeignKey("PresentationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PresentationApp.Models.TextBlock", b =>
                {
                    b.HasOne("PresentationApp.Models.Slide", null)
                        .WithMany("TextBlocks")
                        .HasForeignKey("SlideId");
                });

            modelBuilder.Entity("PresentationApp.Models.DrawingPath", b =>
                {
                    b.Navigation("Points");
                });

            modelBuilder.Entity("PresentationApp.Models.Presentation", b =>
                {
                    b.Navigation("Slides");
                });

            modelBuilder.Entity("PresentationApp.Models.Slide", b =>
                {
                    b.Navigation("Drawings");

                    b.Navigation("TextBlocks");
                });
#pragma warning restore 612, 618
        }
    }
}
